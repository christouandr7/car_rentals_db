/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project_db;

import java.sql.*;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author kyriacos2
 */
public class TblReservations extends javax.swing.JFrame {

   private Connection conn = null;
    private Statement stmt = null;
    private ResultSet rs = null;
    private PreparedStatement prstmt = null;
    private final String sql="SELECT reserves.License_Plate, reserves.Start_Date, reserves.Finish_Date, reserves.Start_Location, reserves.Finish_Location, reserves.Paid, reserves.Customer_ID "
                             + "FROM reserves;";
    private String sqlins ="INSERT INTO reserves (reserves.License_Plate, reserves.Start_Date, reserves.Finish_Date, reserves.Start_Location, reserves.Finish_Location, reserves.Paid, reserves.Customer_ID) "
                        + "VALUES(?,?,?,?,?,?,?);";
    private String sqlup ="UPDATE reserves "
                        + "SET reserves.Finish_Date=?, reserves.Start_Location=?, reserves.Finish_Location=?, reserves.Paid=?, reserves.Customer_ID=? "
                        + "WHERE reserves.License_Plate=? AND reserves.Start_Date=?;";
    private String sqldl="DELETE FROM reserves "
                        + "WHERE reserves.License_Plate=? AND reserves.Start_Date=?;";
    /**
     * Creates new form Table1
     */
    public TblReservations() {
        initComponents();
        conn = Utils.getConnection();
        prepareInputs();
        fillTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jbtnInsert = new javax.swing.JButton();
        jbtnUpdate = new javax.swing.JButton();
        jbtnDelete = new javax.swing.JButton();
        jbtnClear = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jcbCustomerID = new javax.swing.JComboBox<>();
        jdcEndDate = new com.toedter.calendar.JDateChooser();
        jdcStartDate = new com.toedter.calendar.JDateChooser();
        jtxtEndLocation = new javax.swing.JTextField();
        jtxtStartLocation = new javax.swing.JTextField();
        jcbLicensePlate = new javax.swing.JComboBox<>();
        jchkPaid = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jbtnEdit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbtnBack.setText("Back");
        jbtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBackActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 380, 70, -1));

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 740, 400));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("RESERVATIONS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, -1, -1));

        jbtnInsert.setText("Insert");
        jbtnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnInsertActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 90, -1));

        jbtnUpdate.setText("Update");
        jbtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 110, -1));

        jbtnDelete.setText("Delete");
        jbtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 320, 90, -1));

        jbtnClear.setText("Clear");
        jbtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnClearActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 320, 90, -1));

        jLabel2.setText("*License Plate:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, 20));

        jLabel3.setText("*Start Date:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, 20));

        jLabel4.setText("*Start Location:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, 20));

        jLabel5.setText("*Finish Location:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, 20));

        jLabel6.setText("*Finish Date:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, 20));

        jLabel7.setText("*Paid:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, -1, 20));

        jLabel8.setText("*Customer ID:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, 20));

        jcbCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCustomerIDActionPerformed(evt);
            }
        });
        getContentPane().add(jcbCustomerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 180, -1));

        jdcEndDate.setDateFormatString("yyyy-MM-dd");
        getContentPane().add(jdcEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 120, 20));

        jdcStartDate.setDateFormatString("yyyy-MM-dd");
        getContentPane().add(jdcStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 120, 20));

        jtxtEndLocation.setText("jTextField1");
        getContentPane().add(jtxtEndLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, 120, 20));

        jtxtStartLocation.setText("jTextField1");
        getContentPane().add(jtxtStartLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, 120, 20));

        jcbLicensePlate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbLicensePlateActionPerformed(evt);
            }
        });
        getContentPane().add(jcbLicensePlate, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 120, -1));
        getContentPane().add(jchkPaid, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, -1, -1));

        jLabel9.setText("*Mandatory fields");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 430, -1, -1));

        jbtnEdit.setText("Edit Selected Row");
        jbtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditActionPerformed(evt);
            }
        });
        getContentPane().add(jbtnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, -1, -1));

        setSize(new java.awt.Dimension(1085, 513));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBackActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jbtnBackActionPerformed

    private void jbtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpdateActionPerformed
        // TODO add your handling code here:
        Date StartDate,EndDate;
        
        StartDate=Date.valueOf(((JTextField)jdcStartDate.getDateEditor().getUiComponent()).getText());
        EndDate=Date.valueOf(((JTextField)jdcEndDate.getDateEditor().getUiComponent()).getText());
        
        if (jcbLicensePlate.getSelectedIndex()==-1 || jcbCustomerID.getSelectedIndex()==-1 || jtxtStartLocation.getText().isEmpty() || jtxtEndLocation.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please fill all mandatory fields!");
        }
        else
        {
            try {
                prstmt=conn.prepareStatement(sqlup);
                prstmt.setDate(1, EndDate);
                prstmt.setString(2, jtxtStartLocation.getText());
                prstmt.setString(3, jtxtEndLocation.getText());
                prstmt.setBoolean(4, jchkPaid.isSelected());
                prstmt.setInt(5,Integer.parseInt(jcbCustomerID.getSelectedItem().toString().split(", ")[0]));
                prstmt.setString(6, jcbLicensePlate.getSelectedItem().toString());
                prstmt.setDate(7, StartDate);
                
                int i=prstmt.executeUpdate();
                if(i==0)
                {
                   JOptionPane.showMessageDialog(null,"In order to change the reserved vehicle or the start date of the reservation\nthe current reservation must be deleted and a new one must be created!");
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(QrService.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                try {
                    if(prstmt!=null)
                        prstmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(QrAvailVehYear.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            fillTableData();
            clearInputs();
        }
    }//GEN-LAST:event_jbtnUpdateActionPerformed

    private void jcbCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCustomerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbCustomerIDActionPerformed

    private void jcbLicensePlateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbLicensePlateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbLicensePlateActionPerformed

    private void jbtnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnInsertActionPerformed
        // TODO add your handling code here:
        Date StartDate,EndDate;
        
        StartDate=Date.valueOf(((JTextField)jdcStartDate.getDateEditor().getUiComponent()).getText());
        EndDate=Date.valueOf(((JTextField)jdcEndDate.getDateEditor().getUiComponent()).getText());
        
        if (jcbLicensePlate.getSelectedIndex()==-1 || jcbCustomerID.getSelectedIndex()==-1 || jtxtStartLocation.getText().isEmpty() || jtxtEndLocation.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please fill all mandatory fields!");
        }
        else
        {
            try {
                prstmt=conn.prepareStatement(sqlins);
                prstmt.setString(1, jcbLicensePlate.getSelectedItem().toString());
                prstmt.setDate(2, StartDate);
                prstmt.setDate(3, EndDate);
                prstmt.setString(4, jtxtStartLocation.getText());
                prstmt.setString(5, jtxtEndLocation.getText());
                prstmt.setBoolean(6, jchkPaid.isSelected());
                prstmt.setInt(7,Integer.parseInt(jcbCustomerID.getSelectedItem().toString().split(", ")[0]));
                
                prstmt.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(QrService.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                try {
                    if(prstmt!=null)
                        prstmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(QrAvailVehYear.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            fillTableData();
            clearInputs();
        }
        
    }//GEN-LAST:event_jbtnInsertActionPerformed

    private void jbtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnClearActionPerformed
        // TODO add your handling code here:
        clearInputs();
    }//GEN-LAST:event_jbtnClearActionPerformed

    private void jbtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteActionPerformed
        // TODO add your handling code here:
        int i=jTable.getSelectedRow();
        if (i!=-1)
        {
            try {
                prstmt=conn.prepareStatement(sqldl);
                prstmt.setString(1, jTable.getModel().getValueAt(i, 0).toString());
                prstmt.setDate(2, Date.valueOf(jTable.getModel().getValueAt(i, 0).toString()));
                jTable.clearSelection();
                prstmt.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(QrService.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                try {
                    if(prstmt!=null)
                        prstmt.close();
                } catch (SQLException ex) {
                    Logger.getLogger(QrAvailVehYear.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            fillTableData();
        }
        else
            JOptionPane.showMessageDialog(null,"Please select a row!");
    }//GEN-LAST:event_jbtnDeleteActionPerformed

    private void jbtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditActionPerformed
        // TODO add your handling code here:
        int i=jTable.getSelectedRow();
        if (i!=-1)
        {
            jcbLicensePlate.setSelectedItem(jTable.getModel().getValueAt(i, 0).toString());
            jdcStartDate.setDate(Date.valueOf(jTable.getModel().getValueAt(i, 1).toString()));
            jdcEndDate.setDate(Date.valueOf(jTable.getModel().getValueAt(i, 2).toString()));
            jtxtStartLocation.setText(jTable.getModel().getValueAt(i, 3).toString());
            jtxtEndLocation.setText(jTable.getModel().getValueAt(i, 4).toString());
            jchkPaid.setSelected(Boolean.parseBoolean(jTable.getModel().getValueAt(i, 5).toString()));
            jcbCustomerID.setSelectedIndex(-1+Integer.parseInt(jTable.getModel().getValueAt(i, 6).toString()));

        }
        else
            JOptionPane.showMessageDialog(null,"Please select a row!");
    }//GEN-LAST:event_jbtnEditActionPerformed

    @Override
    public void dispose(){
        try {
            if(conn!=null)
                conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(QrFindCustomerInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
        MainMenu.tablesForm.setVisible(true);
        super.dispose();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TblReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TblReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TblReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TblReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TblReservations().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JButton jbtnBack;
    private javax.swing.JButton jbtnClear;
    private javax.swing.JButton jbtnDelete;
    private javax.swing.JButton jbtnEdit;
    private javax.swing.JButton jbtnInsert;
    private javax.swing.JButton jbtnUpdate;
    private javax.swing.JComboBox<String> jcbCustomerID;
    private javax.swing.JComboBox<String> jcbLicensePlate;
    private javax.swing.JCheckBox jchkPaid;
    private com.toedter.calendar.JDateChooser jdcEndDate;
    private com.toedter.calendar.JDateChooser jdcStartDate;
    private javax.swing.JTextField jtxtEndLocation;
    private javax.swing.JTextField jtxtStartLocation;
    // End of variables declaration//GEN-END:variables

    private void fillTableData() {
        try {
            stmt=conn.createStatement();
            rs=stmt.executeQuery(sql);
            jTable.setAutoCreateRowSorter(true); ///////APORIA//////////
            Utils.showTable(rs, jTable);
            jTable.setDefaultEditor(Object.class,null);
        } catch (SQLException ex) {
            Logger.getLogger(TblReservations.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                if(stmt!=null)
                    stmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(QrAvailVehYear.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void prepareInputs() {
        try {
            stmt=conn.createStatement();
            rs=stmt.executeQuery("SELECT vehicles.License_Plate FROM vehicles;");
            while (rs.next())
            {
                jcbLicensePlate.addItem(rs.getString("License_Plate"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(TblReservations.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                if(stmt!=null)
                    stmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(QrAvailVehYear.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            stmt=conn.createStatement();
            rs=stmt.executeQuery("SELECT customer.Customer_ID, customer.First_Name, customer.Last_Name FROM customer;");
            while (rs.next())
            {
                jcbCustomerID.addItem(Integer.toString(rs.getInt("Customer_ID"))+", "+rs.getString("First_Name")+" "+rs.getString("Last_Name"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(TblReservations.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                if(stmt!=null)
                    stmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(QrAvailVehYear.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jdcStartDate.setDate(Date.valueOf(LocalDate.now()));
        jdcEndDate.setDate(Date.valueOf(LocalDate.now()));
        Utils.clearTextBoxes(this);
        Utils.clearComboBoxes(this);
    }

    private void clearInputs() {
        jdcStartDate.setDate(Date.valueOf(LocalDate.now()));
        jdcEndDate.setDate(Date.valueOf(LocalDate.now()));
        Utils.clearTextBoxes(this);
        Utils.clearComboBoxes(this);
        jTable.clearSelection();
    }
}
